#include <windows.h>
#include <GL\glut.h>
#include <math.h>
#include <stdio.h>
#include <SOIL.h>

#define GL_BGR 0x80E0 
// angle of rotation for the camera direction
float angle=0.0;
// actual vector representing the cameraâ€™s direction
float lx=0.0f,lz=-1.0f, ly = 0.0f;
// XZ position of the camera
float x=0.0f,y = 5.0f, z=5.0f;
float gravity = 0.8f;
float jumpHeight = 3.0f;
float maxJumpHeight = 8.0f;
bool isJumping = false;
float moveSpeed = 1.0f;
float deltaAngle = 0.0f;
float oldMouseX = 0;
float oldMouseY = 0;
unsigned int tex;

int mapHeight = 60;
int mapWidth = 60;
int map_x = 9;
int map_y = 9;
int steps = 0;

int faces[][3] = {
{120,183,151},{368,295,294},{4,242,329},{184,4,307},{30,31,271},
{29,30,270},{28,29,269},{27,28,268},{26,27,267},{25,26,266},{264,24,25},
{263,23,24},{262,22,23},{261,21,22},{260,20,21},{259,19,20},{271,31,317},
{18,309,330},{31,211,316},{255,17,18},{254,16,17},{15,16,254},{252,14,15},
{13,14,252},{250,12,13},{249,11,12},{10,11,249},{9,10,248},{246,8,9},
{7,8,246},{244,6,7},{5,6,244},{4,5,243},{198,308,309},{47,71,70},{231,202,201},
{345,233,340},{43,44,100},{327,328,305},{352,276,275},{37,38,66},{38,39,67},
{67,39,40},{68,40,41},{36,65,92},{91,35,36},{308,311,309},{89,33,34},{64,33,88},
{75,108,74},{72,48,49},{73,49,50},{74,50,51},{75,51,52},{76,52,53},{77,53,54},
{54,55,79},{55,56,80},{80,56,57},{57,58,82},{58,59,83},{59,60,84},{60,61,85},
{61,62,86},{117,85,86},{118,86,87},{116,84,85},{115,83,84},{275,214,185},
{112,80,81},{111,79,80},{110,78,79},{42,43,99},{76,77,109},{389,390,363},
{73,74,106},{72,73,105},{71,72,104},{70,71,103},{96,68,69},{95,67,68},
{66,67,95},{65,66,94},{119,87,64},{151,119,88},{120,88,89},{121,89,90},
{122,90,91},{123,91,92},{124,92,93},{93,94,126},{94,95,127},{127,95,96},
{128,96,97},{97,98,130},{98,99,131},{99,100,132},{100,101,133},{101,102,134},
{102,103,135},{103,104,136},{104,105,137},{105,106,138},{106,107,139},
{107,108,140},{108,109,141},{110,111,143},{143,111,112},{144,112,113},
{145,113,114},{146,114,115},{147,115,116},{148,116,117},{150,118,119},
{149,117,118},{181,149,150},{135,168,167},{180,148,149},{179,147,148},
{178,146,147},{177,145,146},{176,144,145},{175,143,144},{142,143,175},
{141,142,174},{140,141,173},{139,140,172},{138,139,171},{137,138,170},
{136,137,169},{45,70,102},{165,133,134},{164,132,133},{163,131,132},
{162,130,131},{161,129,130},{160,128,129},{159,127,128},{126,127,159},
{125,126,158},{124,125,157},{123,124,156},{122,123,155},{121,122,154},
{120,121,153},{212,213,321},{184,306,321},{210,211,31},{209,210,30},
{207,208,28},{206,207,27},{205,206,26},{24,204,205},{203,204,24},
{22,202,203},{208,209,29},{20,200,201},{19,199,200},{226,323,322},
{240,212,328},{211,239,326},{17,197,198},{16,196,197},{195,196,16},
{194,195,15},{13,193,194},{192,193,13},{191,192,12},{10,190,191},
{9,189,190},{188,189,9},{7,187,188},{6,186,187},{185,186,6},{184,185,5},
{198,225,322},{227,324,323},{239,240,327},{228,229,200},{209,237,238},
{235,236,208},{234,235,207},{296,1,337},{351,274,273},{231,232,203},
{229,230,201},{63,64,87},{259,258,332},{228,325,324},{271,334,335},
{213,275,185},{301,239,238},{223,224,196},{222,223,195},{193,221,222},
{220,221,193},{219,220,192},{190,218,219},{189,217,218},{216,217,189},
{187,215,216},{186,214,215},{287,197,224},{52,415,417},{258,257,331},
{46,255,256},{35,245,246},{36,246,247},{37,247,248},{38,248,249},
{249,250,40},{250,251,41},{41,251,252},{252,253,43},{356,381,382},
{47,257,258},{48,258,259},{49,259,260},{50,260,261},{51,261,262},
{56,421,423},{268,58,425},{264,265,55},{265,266,56},{287,225,197},
{268,269,59},{269,270,60},{270,271,61},{272,241,63},{271,272,62},
{302,303,240},{303,273,212},{300,301,238},{299,300,237},{298,299,236},
{297,298,235},{234,339,341},{2,3,338},{231,294,295},{230,293,294}, 
{229,292,293},{227,290,291},{226,289,290},{288,289,226},{285,286,224},
{284,285,223},{221,283,284},{220,282,283},{219,281,282},{280,281,219},
{279,280,218},{216,278,279},{215,277,278},{214,276,277},{212,273,274},
{317,319,335},{319,305,304},{332,313,315},{331,311,313},{366,396,367},
{316,318,319},{313,312,314},{311,310,312},{316,326,327},{324,325,314},
{323,324,312},{322,323,310},{320,328,321},{199,314,325},{241,304,329},
{257,256,330},{272,335,304},{19,315,314},{259,333,315},{336,338,344},
{341,350,344},{336,342,343},{2,336,337},{3,297,341},{348,343,342},
{342,344,350},{346,349,350},{348,349,346},{340,337,343},{341,339,347},
{294,293,366},{365,366,293},{373,303,302},{345,347,339},{365,292,291},
{285,361,362},{284,360,361},{283,359,360},{282,358,359},{281,357,358},
{356,357,281},{355,356,280},{354,355,279},{353,354,278},{352,353,277},
{363,288,287},{364,290,289},{82,83,113},{300,371,372},{299,370,371},
{369,370,299},{296,297,3},{338,3,297},{3,296,2},{369,298,295},{354,379,380},
{361,385,362},{352,377,378},{373,402,374},{90,34,35},{383,360,359},{44,45,101},
{109,110,142},{232,233,203},{369,368,396},{69,42,98},{397,372,371},{243,32,242},
{296,1,337},{338,297,298},{338,298,295},{336,338,337},{166,174,158},{44,413,412},
{253,255,330},{243,329,245},{335,271,334},{259,332,333},{20,315,333},{30,317,334},
{333,260,259},{271,270,334},{35,409,408},{271,61,63},{332,259,47},{410,412,413},
{408,409,407},{34,407,409},{34,244,406},{44,43,411},{43,253,410},{244,245,408},
{254,412,410},{406,408,304},{408,245,329},{257,412,410},{410,253,330},{415,414,416},
{417,416,418},{420,422,423},{422,424,425},{262,414,415},{268,424,422},{266,420,421},
{58,57,423},{264,54,419},{305,307,304},{234,205,233},{418,416,263},{150,151,182},
{120,152,183},{183,182,151},{367,368,294},{307,4,329},{306,184,307},{270,30,271},
{269,29,270},{268,28,269},{267,27,268},{266,26,267},{265,25,266},{265,264,25},
{264,263,24},{263,262,23},{262,261,22},{261,260,21},{260,259,20},{334,271,317},
{256,18,330},{317,31,316},{256,255,18},{255,254,17},{253,15,254},{253,252,15},
{251,13,252},{251,250,13},{250,249,12},{248,10,249},{247,9,248},{247,246,9},
{245,7,246},{245,244,7},{243,5,244},{242,4,243},{18,198,309},{47,48,71},
{70,46,47},{72,71,48},{21,201,202},{230,231,201},{202,22,21},{296,340,233},
{348,345,340},{99,43,100},{318,327,305},{305,319,318},{328,320,305},{275,274,351},
{351,352,275},{65,37,66},{66,38,67},{68,67,40},{69,68,41},{93,92,65},{36,37,65},
{92,91,36},{330,309,331},{308,310,311},{311,331,309},{90,89,34},{89,88,33},
{64,32,33},{107,106,74},{75,76,108},{107,74,108},{73,72,49},{74,73,50},{75,74,51},
{76,75,52},{77,76,53},{78,77,54},{78,54,79},{79,55,80},{81,80,57},{81,57,82},
{82,58,83},{83,59,84},{84,60,85},{85,61,86},{118,117,86},{119,118,87},{117,116,85},
{116,115,84},{186,185,214},{275,276,214},{113,112,81},{112,111,80},{111,110,79},
{98,42,99},{108,76,109},{364,363,390},{362,387,363},{392,393,364},{387,388,363},
{391,392,364},{388,389,363},{390,391,364},{365,364,393},{105,73,106},{104,72,105},
{103,71,104},{102,70,103},{97,96,69},{96,95,68},{94,66,95},{93,65,94},{88,119,64},
{120,151,88},{121,120,89},{122,121,90},{123,122,91},{124,123,92},{125,124,93},
{125,93,126},{126,94,127},{128,127,96},{129,128,97},{129,97,130},{130,98,131},
{131,99,132},{132,100,133},{133,101,134},{134,102,135},{135,103,136},{136,104,137},
{137,105,138},{138,106,139},{139,107,140},{140,108,141},{142,110,143},{144,143,112},
{145,144,113},{146,145,114},{147,146,115},{148,147,116},{149,148,117},{151,150,119},
{150,149,118},{182,181,150},{167,166,134},{134,135,167},{136,168,135},{181,180,149},
{180,179,148},{179,178,147},{178,177,146},{177,176,145},{176,175,144},{174,142,175},
{173,141,174},{172,140,173},{171,139,172},{170,138,171},{169,137,170},{168,136,169},
{102,101,45},{45,46,70},{166,165,134},{165,164,133},{164,163,132},{163,162,131},{162,161,130},
{161,160,129},{160,159,128},{158,126,159},{157,125,158},{156,124,157},{155,123,156},
{154,122,155},{153,121,154},{152,120,153},{328,212,321},{213,184,321},{30,210,31},
{29,209,30},{27,207,28},{26,206,27},{25,205,26},{25,24,205},{23,203,24},{23,22,203},
{208,236,209},{29,28,208},{237,209,236},{21,20,201},{20,19,200},{225,226,322},{327,240,328},
{316,211,326},{18,17,198},{17,16,197},{15,195,16},{14,194,15},{14,13,194},{12,192,13},
{11,191,12},{11,10,191},{10,9,190},{8,188,9},{8,7,188},{7,6,187},{5,185,6},{4,184,5},
{308,198,322},{226,227,323},{326,239,327},{228,291,292},{200,199,228},{292,229,228},
{210,209,238},{207,235,208},{206,234,207},{340,296,337},{273,303,373},{373,351,273},
{202,231,203},{200,229,201},{87,86,62},{63,32,64},{87,62,63},{333,259,332},{227,228,324},
{272,271,335},{213,274,275},{185,184,213},{210,238,239},{301,302,239},{239,211,210},
{195,223,196},{194,222,195},{194,193,222},{192,220,193},{191,219,192},{191,190,219},
{190,189,218},{188,216,189},{188,187,216},{187,186,215},{196,224,197},{286,287,224},
{419,54,53},{53,52,417},{417,419,53},{332,258,331},{255,46,45},{257,47,46},{45,44,254},
{257,46,256},{254,255,45},{36,35,246},{37,36,247},{38,37,248},{39,38,249},{39,249,40},
{40,250,41},{42,41,252},{42,252,43},{383,358,382},{357,356,382},{382,358,357},{48,47,258},
{49,48,259},{50,49,260},{51,50,261},{52,51,262},{57,56,423},{424,268,425},{54,264,55},
{55,265,56},{198,197,225},{287,288,225},{58,268,59},{59,269,60},{60,270,61},{62,272,63},
{61,271,62},{239,302,240},{240,303,212},{237,300,238},{236,299,237},{235,298,236},{234,297,235},
{297,234,341},{336,2,338},{232,231,295},{231,230,294},{230,229,293},{228,227,291},{227,226,290},
{225,288,226},{223,285,224},{222,284,223},{222,221,284},{221,220,283},{220,219,282},{218,280,219},
{217,279,218},{217,216,279},{216,215,278},{215,214,277},{213,212,274},{334,317,335},{335,319,304},
{333,332,315},{332,331,313},{368,367,396},{366,365,396},{395,396,365},{365,393,394},{394,395,365},
{317,316,319},{315,313,314},{313,311,312},{318,316,327},{312,324,314},{310,323,312},{308,322,310},
{306,320,321},{228,199,325},{242,241,329},{331,257,330},{241,272,304},{199,19,314},{19,259,315},
{342,336,344},{338,341,344},{337,336,343},{1,2,337},{338,3,341},{349,348,342},{349,342,350},
{347,346,350},{345,348,346},{348,340,343},{350,341,347},{367,294,366},{292,365,293},{302,301,372},
{372,373,302},{339,234,233},{233,345,339},{346,347,345},{291,290,364},{364,365,291},{286,285,362},
{285,284,361},{284,283,360},{283,282,359},{282,281,358},{280,356,281},{279,355,280},{278,354,279},
{277,353,278},{276,352,277},{287,286,362},{362,363,287},{289,288,363},{363,364,289},{114,113,83},
{81,82,113},{83,115,114},{301,300,372},{300,299,371},{298,369,299},{2,1,3},{296,295,298},
{298,297,296},{3,1,296},{1,2,296},{3,297,296},{368,369,295},{381,356,355},{355,354,381},
{380,381,354},{387,362,386},{361,360,385},{386,362,385},{379,354,353},{353,352,379},
{378,379,352},{377,352,351},{351,373,374},{372,400,373},{376,377,351},{400,401,373},
{375,376,351},{401,402,373},{374,375,351},{91,90,35},{360,383,384},{358,383,359},
{384,385,360},{100,44,101},{142,141,109},{109,77,110},{78,110,77},{232,295,296},
{204,203,233},{296,233,232},{397,369,396},{98,97,69},{69,41,42},{372,397,398},
{370,369,397},{399,400,372},{370,397,371},{398,399,372},{241,242,32},{243,244,33},
{32,63,241},{244,34,33},{33,32,243},{295,296,337},{337,338,295},{182,183,154},{152,153,154},
{154,155,156},{156,157,154},{158,159,160},{160,161,158},{162,163,166},{164,165,166},{166,167,168},
{168,169,170},{170,171,172},{172,173,170},{174,175,178},{176,177,178},{178,179,182},{180,181,182},
{183,152,154},{154,157,158},{158,161,162},{163,164,166},{166,168,170},{170,173,174},{175,176,178},
{179,180,182},{182,154,158},{158,162,166},{166,170,174},{174,178,182},{182,158,174},{254,44,412},
{256,330,255},{253,254,255},{243,242,329},{245,244,243},{260,20,333},{270,30,334},{245,35,408},
{63,241,335},{335,271,63},{241,304,335},{47,257,332},{331,332,257},{259,49,47},{411,410,413},
{406,408,407},{35,34,409},{407,34,406},{413,44,411},{411,43,410},{406,244,408},{253,254,410},
{241,406,304},{304,408,329},{331,257,410},{331,410,330},{417,415,416},{419,417,418},{421,420,423},
{423,422,425},{52,262,415},{420,266,267},{267,268,422},{422,420,267},{56,266,421},{425,58,423},
{418,264,419},{305,320,306},{329,304,307},{306,307,305},{204,233,205},{234,206,205},{262,263,416},{264,418,263},{416,414,262}
};

GLfloat vertices[][3] = {
{-2.965363,1.316403,-4.327168},{-2.976994,1.320416,-4.327168},{-3.031769,1.316403,-4.327168},
{-3.474764,0.905300,-2.412802},{-3.445883,0.838328,-2.412802},{-3.398983,0.776606,-2.412802},
{-3.335866,0.722506,-2.412802},{-3.258958,0.678108,-2.412802},{-3.171214,0.730713,-2.412802},
{-3.076006,0.710398,-2.412802},{-2.976994,0.703538,-2.412802},{-2.877981,0.710398,-2.412802},
{-2.782774,0.730713,-2.412802},{-2.695030,0.678108,-2.412802},{-2.618122,0.722506,-2.412802},
{-2.555005,0.776606,-2.412802},{-2.508105,0.838328,-2.412802},{-2.479224,0.905300,-2.412802},
{-2.508105,1.111571,-2.412802},{-2.555005,1.173293,-2.412802},{-2.618122,1.227392,-2.412802},
{-2.695030,1.271791,-2.412802},{-2.782774,1.304782,-2.412802},{-2.877982,1.325098,-2.412802},
{-2.976994,1.331958,-2.412802},{-3.076007,1.325098,-2.412802},{-3.171215,1.304782,-2.412802},
{-3.258958,1.271791,-2.412802},{-3.335866,1.227392,-2.412802},{-3.398983,1.173292,-2.412802},
{-3.445883,1.111570,-2.412802},{-3.232479,0.946663,-1.169682},{-3.217655,0.879390,-1.169682},
{-3.193583,0.817390,-1.169682},{-3.161188,0.763047,-0.931973},{-3.121714,0.718449,-0.931973},
{-3.076679,0.685310,-0.931973},{-3.027813,0.664903,-0.931973},{-2.976994,0.658012,-0.931973},
{-2.926175,0.664903,-0.931973},{-2.877309,0.685310,-0.931973},{-2.832273,0.718449,-0.931973},
{-2.792799,0.763047,-0.931973},{-2.760404,0.817390,-1.169682},{-2.736332,0.879390,-1.169682},
{-2.721509,0.946663,-1.169682},{-2.716504,1.016625,-1.169682},{-2.721509,1.086587,-1.223413},
{-2.736332,1.153860,-0.931973},{-2.760404,1.215860,-0.931973},{-2.792800,1.270203,-0.931973},
{-2.832273,1.404698,-0.931973},{-2.877309,1.437837,-0.931973},{-2.926175,1.458244,-0.931973},
{-2.976994,1.375238,-0.931973},{-3.027813,1.368347,-0.931973},{-3.076679,1.437837,-0.931973},
{-3.121715,1.404698,-0.931973},{-3.161188,1.360099,-0.931973},{-3.193584,1.215859,-0.931973},
{-3.217655,1.153860,-0.931973},{-3.232479,1.086586,-1.223413},{-3.237484,1.016625,-1.169682},
{-3.243183,0.972986,-0.629364},{-3.080856,0.689611,-0.629364},{-3.029942,0.667484,-0.629364},
{-2.976994,0.660013,-0.629364},{-2.924046,0.667484,-0.629364},{-2.873132,0.689611,-0.629364},
{-2.710805,0.972986,-0.629364},{-2.705590,1.048843,-0.629364},{-2.710805,1.124700,-0.629364},
{-2.726249,1.197641,-0.629364},{-2.751330,1.264865,-0.629364},{-2.785082,1.323787,-0.629364},
{-2.826210,1.462040,-0.629364},{-2.873132,1.497972,-0.629364},{-2.924046,1.520098,-0.629364},
{-2.976994,1.437672,-0.629364},{-3.029943,1.430201,-0.629364},{-3.080856,1.497971,-0.629364},
{-3.127778,1.462039,-0.629364},{-3.168906,1.413684,-0.629364},{-3.202658,1.264864,-0.629364},
{-3.227739,1.197641,-0.629364},{-3.243183,1.124699,-0.629364},{-3.248398,1.048843,-0.629364},
{-3.219924,0.887991,-0.058404},{-3.205829,0.838467,-0.058404},{-3.182940,0.792826,-0.058404},
{-3.152137,0.752821,-0.058404},{-3.114603,0.719989,-0.058404},{-3.071780,0.695594,-0.058404},
{-3.025316,0.680571,-0.058404},{-2.976994,0.675498,-0.058404},{-2.928672,0.680571,-0.058404},
{-2.882207,0.695594,-0.058404},{-2.839385,0.719989,-0.058404},{-2.801851,0.752821,-0.058404},
{-2.771048,0.792826,-0.058404},{-2.748159,0.838467,-0.058404},{-2.734064,0.887991,-0.058404},
{-2.729305,0.939493,-0.058404},{-2.734064,0.990996,-0.058404},{-2.748159,1.040520,-0.058404},
{-2.817173,1.064119,-0.195967},{-2.841078,1.173625,-0.195967},{-2.870205,1.263494,-0.195967},
{-2.903437,1.330273,-0.195967},{-2.939495,1.371395,-0.195967},{-2.976994,1.385281,-0.195967},
{-3.014493,1.371395,-0.195967},{-3.050551,1.330273,-0.195967},{-3.083783,1.263494,-0.195967},
{-3.112910,1.173624,-0.195967},{-3.136815,1.064118,-0.195967},{-3.205829,1.040520,-0.058404},
{-3.219924,0.990996,-0.058404},{-3.224683,0.939493,-0.058404},{-3.134553,0.832886,0.538285},
{-3.125411,0.802572,0.538285},{-3.110566,0.774633,0.538285},{-3.090588,0.750145,0.538285},
{-3.066244,0.730048,0.538285},{-3.038470,0.715115,0.538285},{-3.008334,0.705919,0.538285},
{-2.976994,0.702814,0.538285},{-2.945653,0.705919,0.538285},{-2.915517,0.715115,0.538285},
{-2.887744,0.730048,0.538285},{-2.863400,0.750145,0.538285},{-2.843422,0.774633,0.538285},
{-2.828576,0.802572,0.538285},{-2.819435,0.832886,0.538285},{-2.816348,0.864413,0.538285},
{-2.819435,0.895939,0.538285},{-2.828577,0.926254,0.538285},{-2.843422,0.954192,0.538285},
{-2.863400,0.978680,0.538285},{-2.887744,0.998777,0.538285},{-2.915518,1.013710,0.538285},
{-2.945653,1.022906,0.538285},{-2.976994,1.026011,0.538285},{-3.008334,1.022906,0.538285},
{-3.038471,1.013710,0.538285},{-3.066244,0.998777,0.538285},{-3.090588,0.978680,0.538285},
{-3.110566,0.954192,0.538285},{-3.125411,0.926254,0.538285},{-3.134553,0.895939,0.538285},
{-3.137640,0.864413,0.538285},{-3.024403,0.840517,1.025822},{-3.021652,0.835783,1.025822},
{-3.017185,0.831421,1.025822},{-3.011174,0.827597,1.025822},{-3.003849,0.824459,1.025822},
{-2.995492,0.822127,1.025822},{-2.986424,0.820691,1.025822},{-2.976994,0.820206,1.025822},
{-2.967564,0.820691,1.025822},{-2.958496,0.822127,1.025822},{-2.950139,0.824459,1.025822},
{-2.942814,0.827597,1.025822},{-2.936802,0.831421,1.025822},{-2.932335,0.835783,1.025822},
{-2.929585,0.840517,1.025822},{-2.928656,0.845440,1.025822},{-2.929585,0.850362,1.025822},
{-2.932335,0.855096,1.025822},{-2.936802,0.859459,1.025822},{-2.942814,0.863282,1.025822},
{-2.950139,0.866421,1.025822},{-2.958496,0.868752,1.025822},{-2.967564,0.870188,1.025822},
{-2.976994,0.870673,1.025822},{-2.986424,0.870188,1.025822},{-2.995492,0.868752,1.025822},
{-3.003849,0.866421,1.025822},{-3.011174,0.863282,1.025822},{-3.017185,0.859459,1.025822},
{-3.021652,0.855096,1.025822},{-3.024403,0.850362,1.025822},{-3.025332,0.845440,1.025822},
{-3.437695,0.893875,-3.524976},{-3.410964,0.837991,-3.524976},{-3.367557,0.786489,-3.524976},
{-3.309141,0.741346,-3.524976},{-3.237960,0.704298,-3.524976},{-3.156750,0.762366,-3.524976},
{-3.068633,0.745414,-3.524976},{-2.976994,0.739690,-3.524976},{-2.885355,0.745414,-3.524976},
{-2.797238,0.762366,-3.524976},{-2.716028,0.704298,-3.524976},{-2.644847,0.741346,-3.524976},
{-2.586431,0.786489,-3.524976},{-2.543023,0.837991,-3.524976},{-2.516293,0.893875,-3.524976},
{-2.543024,1.065993,-3.524976},{-2.586431,1.117496,-3.524976},{-2.644847,1.162639,-3.524976},
{-2.716028,1.199686,-3.524976},{-2.818810,1.227215,-3.524976},{-2.906927,1.405212,-3.524976},
{-2.998566,1.342596,-3.430794},{-3.090205,1.405212,-3.524976},{-3.178323,1.227215,-3.524976},
{-3.237960,1.199686,-3.524976},{-3.309141,1.162638,-3.524976},{-3.367558,1.117496,-3.524976},
{-3.410965,1.065993,-3.524976},{-3.363593,0.954641,-4.456656},{-3.356164,0.903956,-4.134564},
{-3.298439,0.810301,-4.134564},{-3.250360,0.770931,-4.134564},{-3.191777,0.738621,-4.134564},
{-3.124939,0.800209,-4.134564},{-3.052416,0.785425,-4.134564},{-2.976994,0.780433,-4.134564},
{-2.901572,0.785425,-4.134564},{-2.829049,0.800209,-4.134564},{-2.762211,0.738621,-4.134564},
{-2.703628,0.770931,-4.134564},{-2.655549,0.810301,-4.134564},{-2.597824,0.903956,-4.134564},
{-2.590395,0.954641,-4.456656},{-2.597824,1.005327,-4.134564},{-2.619823,1.054064,-4.134564},
{-2.655549,1.098981,-4.134564},{-2.703628,1.138351,-4.134564},{-2.762212,1.170661,-4.134564},
{-2.862647,1.225310,-4.134564},{-2.971063,1.375438,-4.140453},{-3.050121,1.375438,-4.140453},
{-3.158537,1.225310,-4.134564},{-3.191777,1.170661,-4.134564},{-3.250361,1.138351,-4.134564},
{-3.298439,1.098981,-4.134564},{-3.334165,1.054064,-4.134564},{-3.356164,1.005326,-4.134564},
{-3.460662,1.003328,-1.477318},{-3.451369,0.933466,-1.477318},{-3.423845,0.866289,-1.477318},
{-3.379150,0.804378,-1.477318},{-3.318999,0.750113,-1.239609},{-3.245706,0.705578,-1.239609},
{-3.162086,0.758083,-1.239609},{-3.071353,0.737705,-1.239609},{-2.976994,0.730824,-1.239609},
{-2.882635,0.737705,-1.239609},{-2.791902,0.758083,-1.239609},{-2.708282,0.705578,-1.239609},
{-2.634988,0.750113,-1.239609},{-2.574838,0.804378,-1.477318},{-2.530142,0.866289,-1.477318},
{-2.502619,0.933466,-1.477318},{-2.493325,1.003329,-1.477318},{-2.502619,1.073191,-1.531049},
{-2.530142,1.140368,-1.239609},{-2.574838,1.202279,-1.239609},{-2.634989,1.256544,-1.239609},
{-2.708282,1.301079,-1.239609},{-2.791902,1.334171,-1.239609},{-2.882635,1.354549,-1.239609},
{-2.976994,1.361429,-1.239609},{-3.071353,1.354548,-1.239609},{-3.162086,1.334170,-1.239609},
{-3.245706,1.301078,-1.239609},{-3.319000,1.256544,-1.239609},{-3.379150,1.202278,-1.239609},
{-3.423846,1.140367,-1.239609},{-3.451369,1.073190,-1.531049},{-3.315546,0.956166,-4.534253},
{-3.309041,0.917913,-4.534253},{-3.289775,0.881131,-4.534253},{-3.258490,0.847232,-4.534253},
{-3.216386,0.817519,-4.534253},{-3.165083,0.793135,-4.534253},{-3.106552,0.775016,-4.534253},
{-3.043042,0.763858,-4.534253},{-2.976994,0.760090,-4.534253},{-2.910946,0.763858,-4.534253},
{-2.847436,0.775016,-4.534253},{-2.788905,0.793135,-4.534253},{-2.737602,0.817519,-4.534253},
{-2.695498,0.847232,-4.534253},{-2.664213,0.881131,-4.534253},{-2.644947,0.917913,-4.534253},
{-2.638442,0.956166,-4.534253},{-2.644947,0.994418,-4.534253},{-2.664213,1.031200,-4.534253},
{-2.695498,1.065099,-4.534253},{-2.737602,1.094812,-4.534253},{-2.788905,1.119196,-4.534253},
{-2.881034,1.167956,-4.702099},{-2.944544,1.289990,-4.534253},{-3.076640,1.289990,-4.534253},
{-3.140150,1.167955,-4.702099},{-3.165084,1.119196,-4.534253},{-3.216387,1.094811,-4.534253},
{-3.258490,1.065099,-4.534253},{-3.289775,1.031200,-4.534253},{-3.309041,0.994418,-4.534253},
{-3.554905,1.051550,-1.279167},{-4.222924,1.023171,-2.403386},{-4.838166,0.942097,-3.683393},
{-4.185466,0.953522,-2.403386},{-1.125995,0.942097,-3.632535},{-1.687995,0.953523,-2.591562},
{-1.091326,1.000214,-3.632535},{-1.650537,1.023171,-2.591562},{-2.516293,1.058332,-3.540989},
{-2.479224,1.092820,-2.428815},{-2.543024,1.114215,-3.540989},{-2.508105,1.159793,-2.428815},
{-3.410965,1.114215,-3.540989},{-3.445883,1.159792,-2.428815},{-3.437695,1.058331,-3.540989},
{-3.474764,1.092820,-2.428815},{-4.872834,1.000214,-3.683393},{-4.819973,0.952178,-4.008173},
{-1.117741,0.952178,-4.004105},{-1.089207,1.002863,-4.326196},{-2.597824,1.053549,-4.150577},
{-2.619823,1.102286,-4.150577},{-3.334165,1.102286,-4.150577},{-3.356164,1.053548,-4.150577},
{-4.848506,1.002863,-4.330265},{-3.519207,0.981688,-1.279167},{-2.437920,0.981688,-1.308168},
{-2.402222,1.051551,-1.308168},{-2.502619,1.121413,-1.255622},{-2.530142,1.188590,-1.255622},
{-3.423846,1.188589,-1.255622},{-3.451369,1.121412,-1.255622},{-2.998566,1.327339,-4.975426},
{-2.965363,1.321526,-4.897296},{-3.031769,1.321526,-4.897296},{-3.023385,1.713150,-4.140453},
{-2.932518,1.589400,-4.534253},{-3.064614,1.589400,-4.534253},{-2.998566,2.195987,-4.927661},
{-2.965363,2.140913,-4.849531},{-3.031769,2.140913,-4.849531},{-2.961612,2.108716,-4.346474},
{-2.998566,2.118847,-4.346474},{-3.035521,2.108716,-4.346474},{-2.947023,2.232195,-4.534253},
{-2.998566,2.289101,-4.534253},{-3.050109,2.232194,-4.534253},{-3.143917,0.928209,-4.849532},
{-3.118504,0.874473,-4.849532},{-3.097338,0.851884,-4.849531},{-3.071548,0.833346,-4.849532},
{-3.042124,0.819571,-4.849532},{-3.010197,0.811088,-4.849532},{-2.976994,0.808224,-4.849532},
{-2.943791,0.811088,-4.849532},{-2.911864,0.819571,-4.849532},{-2.882440,0.833346,-4.849532},
{-2.856650,0.851884,-4.849532},{-2.835484,0.874473,-4.849532},{-2.810071,0.928209,-4.849532},
{-2.810072,0.986371,-4.849532},{-2.835484,1.040107,-4.849532},{-2.856650,1.062696,-4.849532},
{-2.882440,1.081234,-4.849532},{-2.911864,1.095009,-4.849532},{-3.042124,1.095009,-4.849532},
{-3.071548,1.081234,-4.849532},{-3.097339,1.062696,-4.849532},{-3.118504,1.040107,-4.849532},
{-3.143917,0.986371,-4.849532},{-3.042210,0.949060,-4.730332},{-3.040956,0.935700,-4.730332},
{-3.037245,0.922853,-4.730332},{-3.031219,0.911014,-4.730332},{-3.023108,0.900636,-4.730330},
{-3.013226,0.892120,-4.730332},{-3.001951,0.885791,-4.730332},{-2.989717,0.881894,-4.730332},
{-2.976994,0.880578,-4.730332},{-2.964271,0.881894,-4.730332},{-2.952037,0.885791,-4.730332},
{-2.940762,0.892120,-4.730332},{-2.930880,0.900636,-4.730331},{-2.922769,0.911014,-4.730331},
{-2.916743,0.922854,-4.730331},{-2.913032,0.935700,-4.730331},{-2.911778,0.949060,-4.730331},
{-2.913032,0.962421,-4.730331},{-2.916743,0.975267,-4.730331},{-2.922769,0.987107,-4.730331},
{-2.930880,0.997485,-4.730331},{-2.940762,1.006001,-4.730331},{-2.952037,1.012330,-4.730331},
{-3.001951,1.012330,-4.730331},{-3.013226,1.006001,-4.730331},{-3.023108,0.997485,-4.730331},
{-3.031219,0.987107,-4.730332},{-3.037246,0.975267,-4.730332},{-3.040956,0.962421,-4.730332},
{-2.539435,0.873259,-1.531015},{-3.193583,0.843284,-1.216235},{-2.760404,0.843285,-1.216235},
{-3.379150,0.838260,-1.521657},{-3.193583,0.851272,-1.214021},{-3.318999,0.783995,-1.230217},
{-3.161188,0.796929,-0.922581},{-2.634988,0.783995,-1.230217},{-2.792799,0.796929,-0.922581},
{-2.574838,0.838260,-1.521657},{-2.760404,0.851272,-1.214021},{-2.714160,1.258665,-1.230772},
{-2.838151,1.362284,-0.923137},{-2.797780,1.291757,-1.230772},{-2.883187,1.395423,-0.923137},
{-2.888513,1.312135,-1.230772},{-2.932053,1.415830,-0.923137},{-3.077231,1.312135,-1.230772},
{-3.033691,1.325933,-0.923137},{-3.167964,1.291756,-1.230772},{-3.082557,1.395423,-0.923137},
{-3.251584,1.258664,-1.230772},{-3.127593,1.362284,-0.923137}
};

int mapData[20][20] = {
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0.0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},

};

int curY = 0;
int curX = 0;
int rMouseFlag = 0, lMouseFlag = 0;

bool isFacingLeft = false;
bool isFacingRight = false;
bool isFacingNorth = false;
bool isFacingSouth = false;

GLuint	texture[7];			// Storage For One Texture ( NEW )

/*
// Data read from the header of the BMP file
	unsigned char header[54]; // Each BMP file begins by a 54-bytes header
	unsigned int dataPos;     // Position in the file where the actual data begins
	unsigned int width, height;
	unsigned int imageSize;   // = width*height*3
	// Actual RGB data
	unsigned char * data;
*/


/*
unsigned int loadTexture(const char* filename){
	SDL_Surface* img= SDL_LoadBMP(filename);
	unsigned int id;
	printf("I'm here");
	glGenTextures(1,&id);
	glBindTexture(GL_TEXTURE_2D, id);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, img->w, img->h, 
				0,GL_RGB,GL_UNSIGNED_INT, img->pixels);
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	SDL_FreeSurface(img);
	return id;
}
*/

/*
GLuint loadBMP_custom(const char * imagepath){
	
	
	
	FILE * file = fopen(imagepath,"rb");
	if (!file)
	{
		printf("Image could not be opened\n"); 
		return 0;
	}
	if ( fread(header, 1, 54, file)!=54 )
	{ // If not 54 bytes read : problem
     	printf("Not a correct BMP file\n");
     	return false;
 	}
 	
 	if ( header[0]!='B' || header[1]!='M' ){
	    printf("Not a correct BMP file\n");
	    return 0;
	 }
	
	//read ints from bytearray 
	dataPos = *(int*)&(header[0x0A]);
	imageSize = *(int*)&(header[0x22]);
	width = *(int*)&(header[0x12]);
	height = *(int*)&(header[0x16]);
	
	if (imageSize==0)    
	imageSize=width*height*3; // 3 : one byte for each Red, Green and Blue component
	if (dataPos==0)
	dataPos=54;
	
	//create buffer
	data = new unsigned char [imageSize];
	//read actual data from file into the buffer
	fread(data,1,imageSize,file);
	
	fclose(file);
	
	GLuint textureID;
	glGenTextures(1, &textureID);
	
	
	return textureID;
}
*/



int LoadGLTextures()                                    // Load Bitmaps And Convert To Textures
{
    /* load an image file directly as a new OpenGL texture */
    texture[0] = SOIL_load_OGL_texture
        (
        "hammertone.bmp",
        SOIL_LOAD_AUTO,
        SOIL_CREATE_NEW_ID,
        SOIL_FLAG_INVERT_Y
        );
        
        texture[1] = SOIL_load_OGL_texture
        (
        "wood.bmp",
        SOIL_LOAD_AUTO,
        SOIL_CREATE_NEW_ID,
        SOIL_FLAG_INVERT_Y
        );
        
        texture[2] = SOIL_load_OGL_texture
        (
        "sky.bmp",
        SOIL_LOAD_AUTO,
        SOIL_CREATE_NEW_ID,
        SOIL_FLAG_INVERT_Y
        );
        
        texture[3] = SOIL_load_OGL_texture
        (
        "starry night.bmp",
        SOIL_LOAD_AUTO,
        SOIL_CREATE_NEW_ID,
        SOIL_FLAG_INVERT_Y
        );
        
        texture[4] = SOIL_load_OGL_texture
        (
        "wave.bmp",
        SOIL_LOAD_AUTO,
        SOIL_CREATE_NEW_ID,
        SOIL_FLAG_INVERT_Y
        );
        
        texture[5] = SOIL_load_OGL_texture
        (
        "monalisa.bmp",
        SOIL_LOAD_AUTO,
        SOIL_CREATE_NEW_ID,
        SOIL_FLAG_INVERT_Y
        );
        
        texture[6] = SOIL_load_OGL_texture
        (
        "the scream.bmp",
        SOIL_LOAD_AUTO,
        SOIL_CREATE_NEW_ID,
        SOIL_FLAG_INVERT_Y
        );
       
        
     

    if(texture[0] == 0)
        return false;
    if(texture[1] == 0){
    	return false;
    }
    if(texture[2] == 0){
    	return false;
    }
    if(texture[3] == 0){
    	return false;
    }
   
    
    	
 	glBindTexture(GL_TEXTURE_2D, texture[0]);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
   	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
   	
	glBindTexture(GL_TEXTURE_2D, texture[1]);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
   	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
   	
  	glBindTexture(GL_TEXTURE_2D, texture[2]);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
  	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
  	
  	glBindTexture(GL_TEXTURE_2D, texture[3]);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
  	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
  	
  	glBindTexture(GL_TEXTURE_2D, texture[4]);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
  	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

	glBindTexture(GL_TEXTURE_2D, texture[5]);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
  	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);  	

  	
 
    return true;                                        // Return Success
}

void drawPlane(){

	int i = 0;
	
	
	
	
	
	for(i = 0; i < 853; i++){
		glBegin(GL_POLYGON);
		//	printf("i = %d\n", i);
	
//	glScalef(1000.0,1000.0,1000.0);
			glColor3f(1.0f,0.0f,0.0f);
			glVertex3f(vertices[faces[i][0]-1][0], vertices[faces[i][0]-1][0], vertices[faces[i][0]-1][0]);
			glVertex3f(vertices[faces[i][1]-1][1], vertices[faces[i][1]-1][1], vertices[faces[i][1]-1][1]);
			glVertex3f(vertices[faces[i][2]-1][2], vertices[faces[i][2]-1][2], vertices[faces[i][2]-1][2]);
		glEnd();
	
		
	}
	/*
	for(int i = 400; i < 853; i++){
		glBegin(GL_TRIANGLES);
			glColor3f(1.0f,0.0f,0.0f);
			glVertex3f(vertices[faces[i][0]-1][0], vertices[faces[i][0]-1][0], vertices[faces[i][0]-1][0]);
			glVertex3f(vertices[faces[i][1]-1][1], vertices[faces[i][1]-1][1], vertices[faces[i][1]-1][1]);
			glVertex3f(vertices[faces[i][2]-1][2], vertices[faces[i][2]-1][2], vertices[faces[i][2]-1][2]);
		glEnd();
	}
	*/
}

int isPassable(int x, int y){
	if(x < 0|| y<0 || x > 19 || y > 19){
		printf("Collision detected\n");
		return 0;
	}
	if(mapData[y][x] != 0){
		printf("Collision detected");
		return 0;
	}
	
	return 1;
}



void drawSkyBox(){
	

	glBindTexture(GL_TEXTURE_2D, texture[2]);
	
	glColor3f(1.0,1.0,1.0);
	glBegin(GL_QUADS);
	glTexCoord2f(0.0,0.0);
	glVertex3f(-80.0,18.0, 80.0);
	glTexCoord2f(1.0/6,0.0);
	glVertex3f(80.0,18.0,80.0);
	glTexCoord2f(1.0/6,1.0/6);
	glVertex3f(80.0,18.0,-80.0);
	glTexCoord2f(0.0/6,1.0/6);
	glVertex3f(-80.0,18.0,-80.0);
	
	glEnd();
	
	
}

void drawPainting(){
	float height = 3.0;
	glColor3f(1.0,1.0,1.0);
	
	glBindTexture(GL_TEXTURE_2D, texture[3]);
	
	//draw starry night
	glBegin(GL_QUADS);
	glTexCoord2f(0.0,0.0);
	glVertex3f(-5.0,4.0,-50.0);
	glTexCoord2f(1.0,0.0);
	glVertex3f(5.0,4.0,-50.0);
	glTexCoord2f(1.0,1.0);
	glVertex3f(5.0,10.0,-50.0);
	glTexCoord2f(0.0,1.0);
	glVertex3f(-5.0,10.0,-50.0);
	glEnd();
	
	
	glBegin(GL_LINE_LOOP);
	glVertex3f(-5.0,4.0,-50.0);
	glVertex3f(5.0,4.0,-50.0);
	glVertex3f(5.0,10.0,-50.0);
	glVertex3f(-5.0,10.0,-50.0);
	glEnd();
	

	
	glBindTexture(GL_TEXTURE_2D, texture[4]);
	
	
	//draw wave

	glBegin(GL_QUADS);
	glTexCoord2f(1.0,0.0);
	glVertex3f(-5.0,4.0,50.0);
	glTexCoord2f(0.0,0.0);
	glVertex3f(5.0,4.0,50.0);
	glTexCoord2f(0.0,1.0);
	glVertex3f(5.0,10.0,50.0);
	glTexCoord2f(1.0,1.0);
	glVertex3f(-5.0,10.0,50.0);
	glEnd();

	glColor3f(0.0,0.0,0.0);
	glBegin(GL_LINE_LOOP);
	glVertex3f(-5.0,4.0,50.0);
	glVertex3f(5.0,4.0,50.0);
	glVertex3f(5.0,10.0,50.0);
	glVertex3f(-5.0,10.0,50.0);
	glEnd();
	
	glColor3f(1.0,1.0,1.0);
	//draw monalisa
	glBindTexture(GL_TEXTURE_2D, texture[5]);
	glBegin(GL_QUADS);
	glTexCoord2f(0.0,0.0);
	glVertex3f(-50.0,4.0,-5.0);
	glTexCoord2f(1.0,0.0);
	glVertex3f(-50.0,4.0,3.0);
	glTexCoord2f(1.0,1.0);
	glVertex3f(-50.0,12.0,3.0);
	glTexCoord2f(0.0,1.0);
	glVertex3f(-50.0,12.0,-5.0);
	glEnd();
	
	glColor3f(0.0,0.0,0.0);
	glBegin(GL_LINE_LOOP);
	glVertex3f(-50.0,4.0,-5.0);
	glVertex3f(-50.0,4.0,3.0);
	glVertex3f(-50.0,12.0,3.0);
	glVertex3f(-50.0,12.0,-5.0);
	glEnd();
	
	glColor3f(1.0,1.0,1.0);
	//draw scream
	glBindTexture(GL_TEXTURE_2D, texture[6]);
	glBegin(GL_QUADS);
	glTexCoord2f(0.0,0.0);
	glVertex3f(50.0,4.0,-5.0);
	glTexCoord2f(1.0,0.0);
	glVertex3f(50.0,4.0,3.0);
	glTexCoord2f(1.0,1.0);
	glVertex3f(50.0,12.0,3.0);
	glTexCoord2f(0.0,1.0);
	glVertex3f(50.0,12.0,-5.0);
	glEnd();
	
	glColor3f(0.0,0.0,0.0);
	glBegin(GL_LINE_LOOP);
	glVertex3f(50.0,4.0,-5.0);
	glVertex3f(50.0,4.0,3.0);
	glVertex3f(50.0,12.0,3.0);
	glVertex3f(50.0,12.0,-5.0);
	glEnd();

}

void drawWalls(){
	
//	glLoadIdentity();
//	glClear(GL_COLOR_BUFFER_BIT |GL_DEPTH_BUFFER_BIT);	
	int i;
	float dist = 10.55;
	float increment = 15;
	float startpoint = 5;
	float height = 18;
//	glClearColor3f(0.5,0.2,0.3);
	

	glColor3f(1.0,1.0,1.0);
	glBindTexture(GL_TEXTURE_2D, texture[0]);

	
/*
	glBegin(GL_QUADS);
	glTexCoord2f(1.0,0.0);
	glVertex3f(startpoint,0.0,60.0);
	glTexCoord2f(1.0,1.0);
	glVertex3f(startpoint, height, 60.0);
	glTexCoord2f(0.0,1.0);
	glVertex3f(-startpoint,height,60.0);
	glTexCoord2f(0.0,0.0);
	glVertex3f(-startpoint,0.0,60.0);
	glEnd();
	
	
	//Draw to left of Northern Wall
	for(i = 0; i < 9; i++){
		increment = dist + startpoint;
		
		glBegin(GL_QUADS);
		glTexCoord2f(1.0,0.0);
		glVertex3f(startpoint,0.0,60.0);
		glTexCoord2f(1.0,1.0);
		glVertex3f(startpoint, height, 60.0);
		glTexCoord2f(0.0,1.0);
		glVertex3f(increment,height,60.0);
		glTexCoord2f(0.0,0.0);
		glVertex3f(increment,0.0,60.0);
		glEnd();
		startpoint = increment;
		
	}
	startpoint = 5;
	increment = 0;
	//Draw LeftSide of northern wall
	for(i = 0; i < 9; i++){
		increment = dist + startpoint;
		glBegin(GL_QUADS);
		glTexCoord2f(1.0,0.0);
		glVertex3f(-startpoint,0.0,60.0);
		glTexCoord2f(1.0,1.0);
		glVertex3f(-startpoint, height, 60.0);
		glTexCoord2f(0.0,1.0);
		glVertex3f(-increment,height,60.0);
		glTexCoord2f(0.0,0.0);
		glVertex3f(-increment,0.0,60.0);
		glEnd();
		startpoint = increment;
	}
	
	startpoint = 5;
	increment = 0;
	
	glBegin(GL_QUADS);
	glTexCoord2f(1.0,0.0);
	glVertex3f(startpoint,0.0,-60.0);
	glTexCoord2f(1.0,1.0);
	glVertex3f(startpoint, height, -60.0);
	glTexCoord2f(0.0,1.0);
	
	glVertex3f(-startpoint,height,-60.0);
	glTexCoord2f(0.0,0.0);
	glVertex3f(-startpoint,0.0,-60.0);
	glEnd();
	//southern wall
	for(i = 0; i < 9; i++){
		increment = dist + startpoint;
		
		glBegin(GL_QUADS);
		glTexCoord2f(1.0,0.0);
		glVertex3f(startpoint,0.0,-60.0);
		glTexCoord2f(1.0,1.0);
		glVertex3f(startpoint, height, -60.0);
		glTexCoord2f(0.0,1.0);
		glVertex3f(increment,height,-60.0);
		glTexCoord2f(0.0,0.0);
		glVertex3f(increment,0.0,-60.0);
		glEnd();
		startpoint = increment;
		
	}
	
	startpoint = 5;
	increment = 0;
	
	for(i = 0; i < 9; i++){
		increment = dist + startpoint;
		glBegin(GL_QUADS);
		glTexCoord2f(1.0,0.0);
		glVertex3f(-startpoint,0.0,-60.0);
		glTexCoord2f(1.0,1.0);
		glVertex3f(-startpoint, height, -60.0);
		glTexCoord2f(0.0,1.0);
		glVertex3f(-increment,height,-60.0);
		glTexCoord2f(0.0,0.0);
		glVertex3f(-increment,0.0,-60.0);
		glEnd();
		startpoint = increment;
	}
		float xStartpoint = 55.0;
		startpoint = 5;
		increment = 0;
		
	
	for(i = 0; i < 10; i++){
		increment = dist + startpoint;
		glBegin(GL_QUADS);
		glTexCoord2f(1.0,0.0);
		glVertex3f(-xStartpoint,0.0,-startpoint);
		glTexCoord2f(1.0,1.0);
		glVertex3f(-xStartpoint, height, -startpoint);
		glTexCoord2f(0.0,1.0);
		glVertex3f(-xStartpoint,height,-increment);
		glTexCoord2f(0.0,0.0);
		glVertex3f(-xStartpoint,0.0,-increment);
		glEnd();
		startpoint = increment;
	}
	    
		startpoint = 5;
		increment = 0;
		
		
		
	for(i = 0; i < 10; i++){
		increment = dist + startpoint;
		glBegin(GL_QUADS);
		glTexCoord2f(1.0,0.0);
		glVertex3f(-xStartpoint,0.0,startpoint);
		glTexCoord2f(1.0,1.0);
		glVertex3f(-xStartpoint, height, startpoint);
		glTexCoord2f(0.0,1.0);
		glVertex3f(-xStartpoint,height,increment);
		glTexCoord2f(0.0,0.0);
		glVertex3f(-xStartpoint,0.0,increment);
		glEnd();
		startpoint = increment;
	}
		startpoint = 5;
		increment = 0;
		
		glBegin(GL_QUADS);
		glVertex3f(-xStartpoint,0.0,startpoint);
		glTexCoord2f(1.0,1.0);
		glVertex3f(-xStartpoint,height,-startpoint);
		glTexCoord2f(0.0,1.0);
		glVertex3f(-xStartpoint,height,startpoint);
		glTexCoord2f(1.0,0.0);
		glVertex3f(-xStartpoint,0.0,-startpoint);
		glTexCoord2f(0.0,0.0);
		glEnd();
	
	for(i = 0; i < 10; i++){
		increment = dist + startpoint;
		glBegin(GL_QUADS);
		glTexCoord2f(1.0,0.0);
		glVertex3f(xStartpoint,0.0,-startpoint);
		glTexCoord2f(1.0,1.0);
		glVertex3f(xStartpoint, height, -startpoint);
		glTexCoord2f(0.0,1.0);
		glVertex3f(xStartpoint,height,-increment);
		glTexCoord2f(0.0,0.0);
		glVertex3f(xStartpoint,0.0,-increment);
		glEnd();
		startpoint = increment;
		
	}
	    
		startpoint = 5;
		increment = 0;
		
		glBegin(GL_QUADS);
		glVertex3f(xStartpoint,height,startpoint);
		glTexCoord2f(1.0,1.0);
		glVertex3f(xStartpoint,height,-startpoint);
		glTexCoord2f(0.0,1.0);
		glVertex3f(xStartpoint,0.0,-startpoint);
		glTexCoord2f(1.0,0.0);
		glVertex3f(xStartpoint,0.0,startpoint);
		glTexCoord2f(0.0,0.0);
		glEnd();
		
		
	for(i = 0; i < 10; i++){
		increment = dist + startpoint;
		glBegin(GL_QUADS);
		glTexCoord2f(1.0,0.0);
		glVertex3f(xStartpoint,0.0,startpoint);
		glTexCoord2f(1.0,1.0);
		glVertex3f(xStartpoint, height, startpoint);
		glTexCoord2f(0.0,1.0);
		glVertex3f(xStartpoint,height,increment);
		glTexCoord2f(0.0,0.0);
		glVertex3f(xStartpoint,0.0,increment);
		glEnd();
		startpoint = increment;
		
	}
	*/
	
	
	
	glColor3f(1.0,1.0,1.0);
	glBegin(GL_LINE_LOOP);
	glVertex3f(-60.0,height,60.0);
	glVertex3f(60.0,height, 60.0);
	glVertex3f(60.0,0.0,60.0);
	glVertex3f(-60.0, 0.0, 60.0);
	glEnd();
	glBegin(GL_LINE_LOOP);
	glVertex3f(-60.0,0.0,60.0);
	glVertex3f(-60.0,0.0,55.0);
	glVertex3f(-60.0,height,55.0);
	glVertex3f(-60.0, height, 60.0);
	glEnd();
	
	glBegin(GL_LINE_LOOP);
	glVertex3f(-60.0,height, 55.0);
	glVertex3f(60.0,height, 55.0);
	glVertex3f(60.0,0.0, 55.0);
	glVertex3f(-60.0, 0.0, 55.0);
	glEnd();
	glBegin(GL_LINE_LOOP);
	glVertex3f(60.0,height,60.0);
	glVertex3f(60.0,height,55.0);
	glVertex3f(60.0,0.0,55.0);
	glVertex3f(60.0, 0.0, 60.0);
	glEnd();
	
	glColor3f(1.0,1.0,1.0);
	glBegin(GL_QUADS);
//	glTexCoord2f(0.0,1.0);
	glVertex3f(-60.0,height,60.0);
//	glTexCoord2f(1.0,1.0);
	glVertex3f(60.0,height, 60.0);
//	glTexCoord2f(1.0,0.0);
	glVertex3f(60.0,0.0,60.0);
//	glTexCoord2f(0.0,0.0);
	glVertex3f(-60.0, 0.0, 60.0);
	glEnd();
	glBegin(GL_QUADS);
//	glTexCoord2f(0.0,0.0);
	glVertex3f(-60.0,0.0,60.0);
	glVertex3f(-60.0,0.0,55.0);
	glVertex3f(-60.0,height,55.0);
	glVertex3f(-60.0, height, 60.0);
	glEnd();
	
	glBegin(GL_QUADS);
	glTexCoord2f(0.0,1.0);
	glVertex3f(-60.0,height, 55.0);
	glTexCoord2f(1.0,1.0);
	glVertex3f(60.0,height, 55.0);
	glTexCoord2f(1.0,0.0);
	glVertex3f(60.0,0.0, 55.0);
	glTexCoord2f(0.0,0.0);
	glVertex3f(-60.0, 0.0, 55.0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3f(60.0,height,60.0);
	glVertex3f(60.0,height,55.0);
	glVertex3f(60.0,0.0,55.0);
	glVertex3f(60.0, 0.0, 60.0);
	glEnd();
	
	//SouthWall
	glColor3f(0.0,0.0,0.0);
	glBegin(GL_LINE_LOOP);
	glVertex3f(-60.0,height,-60.0);
	glVertex3f(60.0,height, -60.0);
	glVertex3f(60.0,0.0,-60.0);
	glVertex3f(-60.0, 0.0, -60.0);
	glEnd();
	glBegin(GL_LINE_LOOP);
	glVertex3f(-60.0,0.0,-60.0);
	glVertex3f(-60.0,0.0,-55.0);
	glVertex3f(-60.0,height,-55.0);
	glVertex3f(-60.0, height, -60.0);
	glEnd();
	
	glBegin(GL_LINE_LOOP);
	glVertex3f(-60.0,height, -55.0);
	glVertex3f(60.0,height, -55.0);
	glVertex3f(60.0,0.0, -55.0);
	glVertex3f(-60.0, 0.0, -55.0);
	glEnd();
	glBegin(GL_LINE_LOOP);
	glVertex3f(60.0,height,-60.0);
	glVertex3f(60.0,height,-55.0);
	glVertex3f(60.0,0.0,-55.0);
	glVertex3f(60.0, 0.0, -60.0);
	glEnd();
	
	glColor3f(1.0,1.0,1.0);
	glBegin(GL_QUADS);
//	glTexCoord2f(0.0,1.0);
	glVertex3f(-60.0,height,-60.0);
//	glTexCoord2f(1.0,1.0);
	glVertex3f(60.0,height, -60.0);
//	glTexCoord2f(1.0,0.0);
	glVertex3f(60.0,0.0,-60.0);
//	glTexCoord2f(0.0,0.0);
	glVertex3f(-60.0, 0.0, -60.0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3f(-60.0,0.0,-60.0);
	glVertex3f(-60.0,0.0,-55.0);
	glVertex3f(-60.0,height,-55.0);
	glVertex3f(-60.0, height, -60.0);
	glEnd();
	
	glBegin(GL_QUADS);
	glTexCoord2f(0.0,1.0);
	glVertex3f(-60.0,height, -55.0);
	glTexCoord2f(1.0,1.0);
	glVertex3f(60.0,height, -55.0);
	glTexCoord2f(1.0,0.0);
	glVertex3f(60.0,0.0, -55.0);
	glTexCoord2f(0.0,0.0);
	glVertex3f(-60.0, 0.0, -55.0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3f(60.0,height,-60.0);
	glVertex3f(60.0,height,-55.0);
	glVertex3f(60.0,0.0,-55.0);
	glVertex3f(60.0, 0.0, -60.0);
	glEnd();
	
	//Right Wall
	glColor3f(0.0,0.0,0.0);
	glBegin(GL_LINE_LOOP);
	glVertex3f(60.0,height,60.0);
	glVertex3f(60.0,height, -60.0);
	glVertex3f(60.0,0.0,-60.0);
	glVertex3f(60.0, 0.0, 60.0);
	glEnd();
	glBegin(GL_LINE_LOOP);
	glVertex3f(60.0,0.0,-60.0);
	glVertex3f(55.0,0.0,-60.0);
	glVertex3f(55.0,height,-60.0);
	glVertex3f(60.0, height, -60.0);
	glEnd();
	
	glBegin(GL_LINE_LOOP);
	glVertex3f(55.0,height, -60.0);
	glVertex3f(55.0,height, 60.0);
	glVertex3f(55.0,0.0, 60.0);
	glVertex3f(55.0, 0.0, -60.0);
	glEnd();
	glBegin(GL_LINE_LOOP);
	glVertex3f(60.0,height,60.0);
	glVertex3f(55.0,height,60.0);
	glVertex3f(55.0,0.0,60.0);
	glVertex3f(60.0, 0.0, 60.0);
	glEnd();
	
	glColor3f(1.0,1.0,1.0);
	glBegin(GL_QUADS);
//	glTexCoord2f(1.0,1.0);
	glVertex3f(60.0,height,60.0);
//	glTexCoord2f(0.0,1.0);
	glVertex3f(60.0,height, -60.0);
//	glTexCoord2f(0.0,0.0);
	glVertex3f(60.0,0.0,-60.0);
//	glTexCoord2f(0.0,1.0);
	glVertex3f(60.0, 0.0, 60.0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3f(60.0,0.0,-60.0);
	glVertex3f(55.0,0.0,-60.0);
	glVertex3f(55.0,height,-60.0);
	glVertex3f(60.0, height, -60.0);
	glEnd();
	
	glBegin(GL_QUADS);
	glTexCoord2f(0.0,1.0);
	glVertex3f(55.0,height, -60.0);
	glTexCoord2f(1.0,1.0);
	glVertex3f(55.0,height, 60.0);
	glTexCoord2f(1.0,0.0);
	glVertex3f(55.0,0.0, 60.0);
	glTexCoord2f(0.0,0.0);
	glVertex3f(55.0, 0.0, -60.0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3f(60.0,height,60.0);
	glVertex3f(55.0,height,60.0);
	glVertex3f(55.0,0.0,60.0);
	glVertex3f(60.0, 0.0, 60.0);
	glEnd();
	
	//Left Wall
	glColor3f(0.0,0.0,0.0);
	glBegin(GL_LINE_LOOP);
	glVertex3f(-60.0,height,60.0);
	glVertex3f(-60.0,height, -60.0);
	glVertex3f(-60.0,0.0,-60.0);
	glVertex3f(-60.0, 0.0, 60.0);
	glEnd();
	glBegin(GL_LINE_LOOP);
	glVertex3f(-60.0,0.0,-60.0);
	glVertex3f(-55.0,0.0,-60.0);
	glVertex3f(-55.0,height,-60.0);
	glVertex3f(-60.0, height, -60.0);
	glEnd();
	
	glBegin(GL_LINE_LOOP);
	glVertex3f(-55.0,height, -60.0);
	glVertex3f(-55.0,height, 60.0);
	glVertex3f(-55.0,0.0, 60.0);
	glVertex3f(-55.0, 0.0, -60.0);
	glEnd();
	glBegin(GL_LINE_LOOP);
	glVertex3f(-60.0,height,60.0);
	glVertex3f(-55.0,height,60.0);
	glVertex3f(-55.0,0.0,60.0);
	glVertex3f(-60.0, 0.0, 60.0);
	glEnd();
	
	glColor3f(1.0,1.0,1.0);
	glBegin(GL_QUADS);
	glVertex3f(-60.0,height,60.0);
	glVertex3f(-60.0,height, -60.0);
	glVertex3f(-60.0,0.0,-60.0);
	glVertex3f(-60.0, 0.0, 60.0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3f(-60.0,0.0,-60.0);
	glVertex3f(-55.0,0.0,-60.0);
	glVertex3f(-55.0,height,-60.0);
	glVertex3f(-60.0, height, -60.0);
	glEnd();
	
	glBegin(GL_QUADS);
	glTexCoord2f(0.0,1.0);
	glVertex3f(-55.0,height, -60.0);
	glTexCoord2f(1.0,1.0);
	glVertex3f(-55.0,height, 60.0);
	glTexCoord2f(1.0,0.0);
	glVertex3f(-55.0,0.0, 60.0);
	glTexCoord2f(0.0,0.0);
	glVertex3f(-55.0, 0.0, -60.0);
	glEnd();
	glBegin(GL_QUADS);
	glVertex3f(-60.0,height,60.0);
	glVertex3f(-55.0,height,60.0);
	glVertex3f(-55.0,0.0,60.0);
	glVertex3f(-60.0, 0.0, 60.0);
	glEnd();
	
	drawPlane();
	
//	glLoadIdentity();
	
}

void renderScene(void) {
 
	// Clear Color and Depth Buffers

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	// Reset transformations
	glLoadIdentity();
	// Set the camera
//	glFrustum(-1.0,1.0,-1.0,1.0,1.0,100.0);
	gluLookAt(	x,y,z,
				x+lx, y + ly, z+lz,
				0.0f, 1.0f, 0.0f);
				

	 //gluPerspective(60.0, 1.0,1.0,100.0);
//	glFrustum(-1.0,1.0,-1.0,1.0,1.0,100.0);			
		if(y > 5.0){
			y -= gravity;
			gluLookAt(	x, y, z,
				x+lx, y + ly, z+lz,
				0.0f, 1.0f, 0.0f);
				
		}
		
		
		if( y == 1.0){
			isJumping == true;
		}
		glColor3f(1.0f, 1.0f, 1.0f);

	glBindTexture(GL_TEXTURE_2D, texture[1]);

	

	// Draw ground	
	glBegin(GL_QUADS);
	glTexCoord2f(0.0,0.0);
	glVertex3f(-100.0, 0.0f, -100.0f);
	glTexCoord2f(0.0,10.0);
	glVertex3f(-100.0f, 0.0f, 100.0f);
	glTexCoord2f(10.0,0.0);
	glVertex3f( 100.0f, 0.0f, 100.0f);
	glTexCoord2f(10.0,10.0);
	glVertex3f( 100.0f, 0.0f, -100.0f);
	
	glEnd();
	
	drawSkyBox();
	
	
	drawPainting();
	
	

	drawWalls();
	
	
	// Draw 36 SnowMen
	/*for(int i = -3; i < 3; i++)
		for(int j=-3; j < 3; j++) {
			glPushMatrix();
			glTranslatef(i*10.0,0,j * 10.0);
			drawSnowMan();
			glPopMatrix();
		}*/
		glutSwapBuffers();
		
	}


void changeSize(int w, int h) {

	// Prevent a divide by zero, when window is too short
	// (you cant make a window of zero width).
	if (h == 0)
		h = 1;
	float ratio = w * 1.0 / h;

	// Use the Projection Matrix
	glMatrixMode(GL_PROJECTION);

	// Reset Matrix
	glLoadIdentity();

	// Set the viewport to be the entire window
	glViewport(0, 0, w, h);

	// Set the correct perspective.
	gluPerspective(45.0f, ratio, 0.1f, 100.0f);

	// Get Back to the Modelview
	glMatrixMode(GL_MODELVIEW);
}

void checkFacing(){
	if(angle <= 0.7 && angle >= -0.7){
		isFacingNorth = true;
		isFacingLeft = false;
		isFacingSouth = false;
		isFacingRight = false;
	}
	if(angle > 0.7 && angle < 2.5){
		isFacingRight = true;
		isFacingNorth = false;
		isFacingLeft = false;
		isFacingSouth = false;
	}
	if(angle >= 2.5 && angle <= -2.5){
		isFacingSouth = true;
		isFacingLeft = false;
		isFacingRight = false;
		isFacingNorth = false;
	}
	if(angle < -0.7 && angle > -2.5){
		isFacingLeft = true;
		isFacingSouth = false;
		isFacingRight = false;
		isFacingNorth = false;
	}
	
}

void processNormalKeys(unsigned char key, int MouseX, int MouseY) {

	if (key == 27)
	exit(0);
	else if(key == 'a'){
		angle -= 0.1;
		if(angle < -3.3){
			angle = 3.1;
		}
		lx = sin(angle);
		lz = cos(angle) * -1;
		printf("angle: %f\n", angle);
		checkFacing();
		
	}
	else if(key == 'd'){
		angle += 0.1;
		if(angle > 3.3){
			angle = -3.1;
		}
		lx = sin(angle);
		lz = cos(angle) * -1;
		printf("angle: %f\n", angle);
		checkFacing();
	}
	else if(key == 'w'){
		if(isPassable(map_x,map_y+1)){
			x+=lx;
			z += lz;
			steps++;
			if(isFacingNorth){
					if(steps >= 6){
					map_y++;
					steps = 0;	
				}
			}
			if(isFacingSouth){
				if(steps >=6){
				map_y--;
				steps = 0;
				}
			}
			if(isFacingRight){
				if(steps >= 6){
				map_x++;
				steps = 0;	
				}
			}
			if(isFacingLeft){
				if(steps >= 6){
				map_x--;
				steps = 0;	
				}
			}
		}
		
	
	}
	else if(key == 's'){
		if(isPassable(map_x,map_y-1)){
			z -= lz;
			x-=lx;
			steps++;
			if(isFacingNorth){
				if(steps >=6){
				map_y--;
				steps = 0;
				}
			}
			if(isFacingSouth){
				if(steps >=6){
				map_y++;
				steps = 0;	
				}
			}
			if(isFacingRight){
				if(steps >= 6){
				map_x--;
				steps = 0;	
				}
			}
			if(isFacingLeft){
				if(steps >= 6){
				map_x++;
				steps = 0;	
				}
			}
		}
	}
}

void moveMouse(int MouseX, int MouseY)
{
 /* int diffX = MouseX - oldMouseX;
  int diffY = MouseY - oldMouseY;
  oldMouseX = MouseX;
  oldMouseY = MouseY;
  lx += (float) diffY;
  lz += (float) diffX;
  gluLookAt(	diffX, diffY, z,
				x+lx, y, z+lz,
				0.0f, 1.0f, 0.0f);*/
  int diffY = MouseY - oldMouseY;
  deltaAngle = (x - oldMouseX) * 0.001f;
  lx = sin(angle + deltaAngle);
  lz = cos(angle + deltaAngle);
  //ly += 1;
 // int diffY = MouseY - oldMouseY;
  oldMouseX = MouseX;
  oldMouseY = MouseY;
  
}

void mouseFunc(int btn, int state, int x, int y){

	if(btn == GLUT_RIGHT_BUTTON && state == GLUT_DOWN){
			rMouseFlag = 1;
			curX = x;
			curY = y;
			}
	else{
		rMouseFlag = 0;
	}
		if(btn == GLUT_LEFT_BUTTON && state == GLUT_DOWN){
			lMouseFlag = 1;
			curX = x;
			curY = y;
			}
	else{
		lMouseFlag = 0;
	}
}

void motionFunc(int x, int y){
	int dy = curY - y;
	int dx = curX - x;
	if(rMouseFlag == 1){
		if(dx > 0){
			angle -= 0.02;
		}
		if(dx < 0){
			angle += 0.02;
		}
		lx = sin(angle)*(hypot(lx, lz));
		lz = -cos(angle)*(hypot(lx, lz));
		checkFacing();
	}
	if(lMouseFlag ==1){
		if(dy > 0){
			ly +=0.02;
		}
		if(dy < 0){
			ly -=0.02;
		}
	}
}

void processSpecialKeys(int key, int xx, int yy) {

	float fraction = 1.0f;
	float hypotenusex = lx / sin(angle);
	float hypotenusez = lz / cos(angle);
	switch (key) {
		case GLUT_KEY_LEFT :
					/*
						angle -= 0.1;
						lx = sin(angle) ;
						lz = cos(angle) * -1 ;
						*/
						break;
		case GLUT_KEY_RIGHT :
					/*
						angle += 0.1;
						lx = sin(angle);
						lz = cos(angle) * -1;*/
						break;
		case GLUT_KEY_UP :
						x+=lx;
						z += lz;
						
						break;
		case GLUT_KEY_DOWN :
						z -= lz;
						x-=lx;
						break;
						
		case GLUT_KEY_F1:
						printf("jump");
					
						if(y < maxJumpHeight){
							y+=jumpHeight;
							isJumping = true;
							
							
						}
						break;
						
						
	}	
}

int main(int argc, char **argv) {

	// init GLUT and create window
	//Start SDL
   
    
    
    
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowPosition(100,100);
	glutInitWindowSize(800,800);
	glutCreateWindow("MP");
	// OpenGL init
	glEnable(GL_DEPTH_TEST);
	glEnable(GL_TEXTURE_2D);
	LoadGLTextures();
	// register callbacks
//	drawWalls();
	glutDisplayFunc(renderScene);
	glutReshapeFunc(changeSize);
//	glutFullScreen();
	glutIdleFunc(renderScene);
	glutKeyboardFunc(processNormalKeys);
	glutSpecialFunc(processSpecialKeys);
	glutMotionFunc(motionFunc);
	glutMouseFunc(mouseFunc);
//	glutPassiveMotionFunc(moveMouse);
	
	
	// enter GLUT event processing cycle
	glutMainLoop();

}
